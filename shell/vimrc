" Function key fixes for OS X
if has('mac') && ($TERM == 'xterm-256color' || $TERM == 'screen-256color')
  map <Esc>OP <F1>
  map <Esc>OQ <F2>
  map <Esc>OR <F3>
  map <Esc>OS <F4>
  map <Esc>[16~ <F5>
  map <Esc>[17~ <F6>
  map <Esc>[18~ <F7>
  map <Esc>[19~ <F8>
  map <Esc>[20~ <F9>
  map <Esc>[21~ <F10>
  map <Esc>[23~ <F11>
  map <Esc>[24~ <F12>
endif

call plug#begin('~/.vim/plugged')

Plug 'SirVer/ultisnips'
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }
Plug 'honza/vim-snippets'
Plug 'janko/vim-test'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-easy-align'
Plug 'morhetz/gruvbox'
Plug 'ms-jpq/chadtree', {'branch': 'chad', 'do': ':UpdateRemotePlugins'}
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tmux-plugins/vim-tmux'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'voldikss/vim-floaterm'

if has('mac')
  Plug 'rizzatti/dash.vim'
endif

if has('nvim') || has('patch-8.0.902')
  Plug 'mhinz/vim-signify'
else
  Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
endif

call plug#end()

let g:CommandTFileScanner="git"
let g:CommandTTraverseSCM="pwd"
set wildignore=*.o,*.a,*.so,*.pyc,*.swp,.git/,*.class,*/target/*,.idea/

" For vim-signify updates
set updatetime=100

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

if has('mac')
  nmap <silent> <leader>d <Plug>DashSearch
endif

nmap <Leader>l <Plug>(Limelight)
xmap <Leader>l <Plug>(Limelight)

let g:limelight_conceal_ctermfg = 240
let g:goyo_width = 120

autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>

" FZF bindings
nnoremap <silent> <leader>t :FZF --layout=reverse<CR>

" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Configuration for vim-scala
au BufRead,BufNewFile *.sbt set filetype=scala
nnoremap <silent> <space>si :<C-u>SortScalaImports<CR>

" Comments highlighting
autocmd FileType json syntax match Comment +\/\/.\+$+

silent! nmap <C-p> <cmd>CHADopen<CR>

set showcmd		" display incomplete commands

" Don't use Ex mode, use Q for formatting
map Q gq

" Make it easier to turn off highlighting after a search
nnoremap <esc> :noh<return><esc>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END
else
  set autoindent		" always set autoindenting on
endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

set ignorecase
set expandtab
set number
set hls
syntax on

set background=dark
colorscheme gruvbox

autocmd FileType make setlocal noexpandtab

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search and cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

set clipboard=unnamed

" vim-test settings
" make test commands execute using dispatch.vim
" let test#strategy = "dispatch"
let test#strategy = "neovim"
let test#scala#runner = 'sbttest'

nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

if has('nvim')
  tmap <C-o> <C-\><C-n>
endif

let test#neovim#term_position = "topright"
let test#neovim#term_position = "vert"
let test#neovim#term_position = "vert botright 90"

" end vim-test settings

" Airline settings
" let g:airline_statusline_ontop = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='distinguished'
let g:airline_powerline_fonts = 1
let g:bufferline_echo = 0
" End Airline settings

" Underline the current line with dashes in normal mode
nnoremap <F5> yyp<c-v>$r-
" Underline the current line with dashes in insert mode
inoremap <F5> <Esc>yyp<c-v>$r-A

